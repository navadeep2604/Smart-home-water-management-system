#include <WiFi.h>
#include <WebServer.h>

#define TRIG_TANK 5
#define ECHO_TANK 18
#define FLOW_SENSOR 19
#define RELAY_MOTOR 23
#define RELAY_VALVE 22

const char* ssid = "Your_WiFi_SSID";
const char* password = "Your_WiFi_Password";

WebServer server(80);

volatile int flowPulseCount = 0;
float flowRate = 0.0;

void IRAM_ATTR flowSensorISR() {
    flowPulseCount++;
}

long getTankLevel() {
    digitalWrite(TRIG_TANK, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG_TANK, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_TANK, LOW);
    return pulseIn(ECHO_TANK, HIGH) * 0.034 / 2;
}

void handleRoot() {
    String html = "<html><body><h2>Water Management System</h2>";
    html += "<p><a href='/motor/on'>Turn ON Motor</a></p>";
    html += "<p><a href='/motor/off'>Turn OFF Motor</a></p>";
    html += "<p>Water Tank Level: " + String(getTankLevel()) + " cm</p>";
    html += "<p>Tap Water Flow Rate: " + String(flowRate) + " L/min</p>";
    html += "</body></html>";
    server.send(200, "text/html", html);
}

void motorOn() {
    digitalWrite(RELAY_MOTOR, LOW);
    server.send(200, "text/html", "<p>Motor Turned ON</p><a href='/'>Back</a>");
}

void motorOff() {
    digitalWrite(RELAY_MOTOR, HIGH);
    server.send(200, "text/html", "<p>Motor Turned OFF</p><a href='/'>Back</a>");
}

void setup() {
    Serial.begin(115200);
    pinMode(TRIG_TANK, OUTPUT);
    pinMode(ECHO_TANK, INPUT);
    pinMode(FLOW_SENSOR, INPUT_PULLUP);
    pinMode(RELAY_MOTOR, OUTPUT);
    pinMode(RELAY_VALVE, OUTPUT);
    
    digitalWrite(RELAY_MOTOR, HIGH);
    digitalWrite(RELAY_VALVE, HIGH);

    attachInterrupt(digitalPinToInterrupt(FLOW_SENSOR), flowSensorISR, RISING);

    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected to WiFi");
    server.on("/", handleRoot);
    server.on("/motor/on", motorOn);
    server.on("/motor/off", motorOff);
    server.begin();
}

void loop() {
    server.handleClient();

    static unsigned long lastFlowCalc = 0;
    if (millis() - lastFlowCalc > 1000) {
        lastFlowCalc = millis();
        flowRate = (flowPulseCount / 7.5); // Adjust for sensor calibration
        flowPulseCount = 0;
    }

    long tankLevel = getTankLevel();

    if (tankLevel > 40) {
        digitalWrite(RELAY_MOTOR, LOW); // Turn on the motor
    } else if (tankLevel < 10) {
        digitalWrite(RELAY_MOTOR, HIGH); // Turn off the motor
    }

    if (flowRate > 10) { // Overflow detected
        digitalWrite(RELAY_VALVE, LOW); // Close the tap
    } else {
        digitalWrite(RELAY_VALVE, HIGH);
    }
}

